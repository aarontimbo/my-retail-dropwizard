/*
* build script for myRetail product-service
*/
import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer


plugins {
    id 'groovy'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

version = "${currentVersion}"

task version {
    println "Current Version: ${currentVersion}"
}

// The main class of the application
mainClassName = 'com.myretail.ProductApplication'

dependencies {
    compile "io.dropwizard:dropwizard-core:${dropwizardVersion}"
    compile 'net.vz.mongodb.jackson:mongo-jackson-mapper:1.4.2'
    compile 'io.federecio:dropwizard-swagger:0.7.0'

    compile project(':services:product:product-entities')
    
    testCompile 'org.objenesis:objenesis:2.2'
}

jar {
    manifest {
        attributes 'Main-Class': 'com.myretail.ProductApplication'
        attributes 'Built-Date': new Date() //now
        attributes 'Built-By': System.getProperty('user.name')
        attributes 'Build-Jdk': System.getProperty('java.version')
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
        attributes 'Implementation-Vendor-Id': project.group
    }
}

shadowJar {
    mergeServiceFiles {
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
}

task runApp(dependsOn: 'shadowJar', group: 'dropwizard',  description: "Run service using local configuration") << {
    // Grab any dw. properties that are specified on the command line and pass to the Java process (i.e. dw.http.port=8080)
    def props = project.ext.properties.findAll { it.key.startsWith('dw') }
    javaexec {
        main = '-jar'
        args = ["${shadowJar.archivePath}", 'server', 'src/main/resources/local_config.yml']
        systemProperties = props
    }
}
