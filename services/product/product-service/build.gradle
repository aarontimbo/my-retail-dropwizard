/*
* build script for myRetail product-service
*/
import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer


plugins {
    id 'groovy'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

version = "${currentVersion}"

task version {
    println "Current Version: ${currentVersion}"
}

// The main class of the application
mainClassName = 'com.myretail.ProductApplication'

dependencies {
    compile "io.dropwizard:dropwizard-core:${dropwizardVersion}"
    compile 'net.vz.mongodb.jackson:mongo-jackson-mapper:1.4.2'
    compile 'io.federecio:dropwizard-swagger:0.7.0'

    compile project(':services:product:product-entities')
    
    testCompile 'org.objenesis:objenesis:2.2'
}

jar {
    manifest {
        attributes 'Main-Class': 'com.myretail.ProductApplication'
        attributes 'Built-Date': new Date() //now
        attributes 'Built-By': System.getProperty('user.name')
        attributes 'Build-Jdk': System.getProperty('java.version')
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
        attributes 'Implementation-Vendor-Id': project.group
    }
}

shadowJar {
    mergeServiceFiles {
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
}

/**
 * Task that will start up the DW service using the local configuration.
 * This doesn't fork, so the Gradle process doesn't return until the service is killed (Ctrl+C)
 */
[runShadow, run].each {
    it.configure {
        def props = project.ext.properties.findAll { it.key.startsWith('dw') || it.key.startsWith('feature') }
        systemProperties = props

        //Configure the Dropwizard Target. Defaults to 'server'
        def serviceTarget = 'server'
        args serviceTarget

        //Configure the Dropwizard configuration file path.
        def configName = 'local'
        args "src/main/resources/${configName}_config.yml"

        //Configure if the service is in debug mode. Defaults to false
        def debugVal = project.hasProperty('run.debug')
        debug = debugVal
    }
}
